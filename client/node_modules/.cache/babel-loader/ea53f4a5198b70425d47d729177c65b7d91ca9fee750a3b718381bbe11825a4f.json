{"ast":null,"code":"import { postServerData, putServerData, deleteServerData } from '../helper/helper';\nimport * as Action from '../redux/result_reducer';\nexport const PushAnswer = result => async dispatch => {\n  try {\n    await dispatch(Action.pushResultAction(result));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateResult = index => async dispatch => {\n  try {\n    dispatch(Action.updateResultAction(index));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//insert user data\nexport const usePublishResult = resultData => {\n  const {\n    result,\n    username\n  } = resultData;\n  (async () => {\n    try {\n      if (result.length === 0 && !username) throw new Error(\"Couldn't get result\");\n      await postServerData('http://localhost:5000/api/result', resultData, data => data);\n    } catch (error) {\n      console.log(error);\n    }\n  })();\n};\n\n//update user data\nexport const useUpdateResult = async resultData => {\n  try {\n    const {\n      _id\n    } = resultData;\n    if (!_id) {\n      throw new Error(\"Invalid data provided: _id is missing\");\n    }\n\n    // Update the result on the server\n    await putServerData('http://localhost:5000/api/result', resultData);\n    console.log('Result updated successfully');\n  } catch (error) {\n    console.error('Error updating result:', error);\n  }\n};\n\n//delete user data\nexport const useDropResult = async resultData => {\n  try {\n    const {\n      _id\n    } = resultData;\n    if (!_id) {\n      throw new Error(\"Invalid data provided: _id is missing\");\n    }\n\n    // Delete the result on the server\n    await deleteServerData('http://localhost:5000/api/result', resultData);\n    console.log('Result deleted successfully');\n  } catch (error) {\n    console.error('Error deleting result:', error);\n  }\n};","map":{"version":3,"names":["postServerData","putServerData","deleteServerData","Action","PushAnswer","result","dispatch","pushResultAction","error","console","log","updateResult","index","updateResultAction","usePublishResult","resultData","username","length","Error","data","useUpdateResult","_id","useDropResult"],"sources":["C:/Users/Pahan/my-project-app/client1/src/hooks/setResult.js"],"sourcesContent":["import { postServerData, putServerData, deleteServerData } from '../helper/helper'\r\nimport * as Action from '../redux/result_reducer'\r\n\r\nexport const PushAnswer = (result) => async (dispatch) => {\r\n    try{ \r\n        await dispatch(Action.pushResultAction(result))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const updateResult = (index) => async (dispatch) => {\r\n    try {\r\n        dispatch(Action.updateResultAction(index))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n//insert user data\r\nexport const usePublishResult = (resultData) => {\r\n    const {result, username} = resultData;\r\n    (async () => { \r\n        try{\r\n            if(result.length === 0 && !username) throw new Error(\"Couldn't get result\");\r\n            await postServerData('http://localhost:5000/api/result', resultData, data => data)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    })();\r\n}\r\n\r\n//update user data\r\nexport const useUpdateResult = async (resultData) => {\r\n    try {\r\n        const { _id } = resultData;\r\n        if (!_id) {\r\n            throw new Error(\"Invalid data provided: _id is missing\");\r\n        }\r\n\r\n        // Update the result on the server\r\n        await putServerData('http://localhost:5000/api/result', resultData);\r\n        console.log('Result updated successfully');\r\n    } catch (error) {\r\n        console.error('Error updating result:', error);\r\n    }\r\n};\r\n\r\n//delete user data\r\nexport const useDropResult = async (resultData) => {\r\n    try {\r\n        const { _id } = resultData;\r\n        if (!_id) {\r\n            throw new Error(\"Invalid data provided: _id is missing\");\r\n        }\r\n\r\n        // Delete the result on the server\r\n        await deleteServerData('http://localhost:5000/api/result', resultData);\r\n        console.log('Result deleted successfully');\r\n    } catch (error) {\r\n        console.error('Error deleting result:', error);\r\n    }\r\n};"],"mappings":"AAAA,SAASA,cAAc,EAAEC,aAAa,EAAEC,gBAAgB,QAAQ,kBAAkB;AAClF,OAAO,KAAKC,MAAM,MAAM,yBAAyB;AAEjD,OAAO,MAAMC,UAAU,GAAIC,MAAM,IAAK,MAAOC,QAAQ,IAAK;EACtD,IAAG;IACC,MAAMA,QAAQ,CAACH,MAAM,CAACI,gBAAgB,CAACF,MAAM,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMG,YAAY,GAAIC,KAAK,IAAK,MAAON,QAAQ,IAAK;EACvD,IAAI;IACAA,QAAQ,CAACH,MAAM,CAACU,kBAAkB,CAACD,KAAK,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,gBAAgB,GAAIC,UAAU,IAAK;EAC5C,MAAM;IAACV,MAAM;IAAEW;EAAQ,CAAC,GAAGD,UAAU;EACrC,CAAC,YAAY;IACT,IAAG;MACC,IAAGV,MAAM,CAACY,MAAM,KAAK,CAAC,IAAI,CAACD,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAAC,qBAAqB,CAAC;MAC3E,MAAMlB,cAAc,CAAC,kCAAkC,EAAEe,UAAU,EAAEI,IAAI,IAAIA,IAAI,CAAC;IACtF,CAAC,CAAC,OAAOX,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB;EACJ,CAAC,EAAE,CAAC;AACR,CAAC;;AAED;AACA,OAAO,MAAMY,eAAe,GAAG,MAAOL,UAAU,IAAK;EACjD,IAAI;IACA,MAAM;MAAEM;IAAI,CAAC,GAAGN,UAAU;IAC1B,IAAI,CAACM,GAAG,EAAE;MACN,MAAM,IAAIH,KAAK,CAAC,uCAAuC,CAAC;IAC5D;;IAEA;IACA,MAAMjB,aAAa,CAAC,kCAAkC,EAAEc,UAAU,CAAC;IACnEN,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAClD;AACJ,CAAC;;AAED;AACA,OAAO,MAAMc,aAAa,GAAG,MAAOP,UAAU,IAAK;EAC/C,IAAI;IACA,MAAM;MAAEM;IAAI,CAAC,GAAGN,UAAU;IAC1B,IAAI,CAACM,GAAG,EAAE;MACN,MAAM,IAAIH,KAAK,CAAC,uCAAuC,CAAC;IAC5D;;IAEA;IACA,MAAMhB,gBAAgB,CAAC,kCAAkC,EAAEa,UAAU,CAAC;IACtEN,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAClD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}