{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pahan\\\\my-project-app\\\\client1\\\\src\\\\components\\\\EditQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getServerData, putServerData } from '../helper/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditQuestions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [editedQuestions, setEditedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [serverError, setServerError] = useState('');\n\n  // Fetch questions and answers from the server\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getServerData('http://localhost:5000/api/questions');\n        setQuestions(data.questions);\n        setEditedQuestions(data.questions); // Initialize editedQuestions with fetched data\n        setIsLoading(false);\n      } catch (error) {\n        setServerError('Error fetching questions: ' + error.message);\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Handle changes in question text\n  const handleQuestionChange = (index, value) => {\n    const updatedQuestions = [...editedQuestions];\n    updatedQuestions[index].question = value;\n    setEditedQuestions(updatedQuestions);\n  };\n\n  // Handle changes in answer text\n  const handleAnswerChange = (index, value) => {\n    const updatedQuestions = [...editedQuestions];\n    updatedQuestions[index].answer = value;\n    setEditedQuestions(updatedQuestions);\n  };\n\n  // Save edited questions and answers to the server\n  const saveChanges = async () => {\n    try {\n      await putServerData('http://localhost:5000/api/questions', {\n        questions: editedQuestions\n      });\n      console.log('Changes saved successfully');\n    } catch (error) {\n      console.error('Error saving changes:', error);\n      // Handle error appropriately (e.g., show an error message to the user)\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n  if (serverError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: serverError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), editedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question.question,\n        onChange: e => handleQuestionChange(index, e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question.answer,\n        onChange: e => handleAnswerChange(index, e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveChanges,\n      children: \"Save Changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_s(EditQuestions, \"lXmhX5a/JCqfARRzDC2CBGUFYjk=\");\n_c = EditQuestions;\nexport default EditQuestions;\nvar _c;\n$RefreshReg$(_c, \"EditQuestions\");","map":{"version":3,"names":["React","useState","useEffect","getServerData","putServerData","jsxDEV","_jsxDEV","EditQuestions","_s","questions","setQuestions","editedQuestions","setEditedQuestions","isLoading","setIsLoading","serverError","setServerError","fetchData","data","error","message","length","children","fileName","_jsxFileName","lineNumber","columnNumber","handleQuestionChange","index","value","updatedQuestions","question","handleAnswerChange","answer","saveChanges","console","log","map","type","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Pahan/my-project-app/client1/src/components/EditQuestion.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getServerData, putServerData } from '../helper/helper';\r\n\r\nconst EditQuestions = () => {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [editedQuestions, setEditedQuestions] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [serverError, setServerError] = useState('');\r\n\r\n    // Fetch questions and answers from the server\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await getServerData('http://localhost:5000/api/questions');\r\n                setQuestions(data.questions);\r\n                setEditedQuestions(data.questions); // Initialize editedQuestions with fetched data\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                setServerError('Error fetching questions: ' + error.message);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (!questions || questions.length === 0) {\r\n        return <div>No questions found.</div>;\r\n      }\r\n\r\n    // Handle changes in question text\r\n    const handleQuestionChange = (index, value) => {\r\n        const updatedQuestions = [...editedQuestions];\r\n        updatedQuestions[index].question = value;\r\n        setEditedQuestions(updatedQuestions);\r\n    };\r\n\r\n    // Handle changes in answer text\r\n    const handleAnswerChange = (index, value) => {\r\n        const updatedQuestions = [...editedQuestions];\r\n        updatedQuestions[index].answer = value;\r\n        setEditedQuestions(updatedQuestions);\r\n    };\r\n\r\n    // Save edited questions and answers to the server\r\n    const saveChanges = async () => {\r\n        try {\r\n            await putServerData('http://localhost:5000/api/questions', { questions: editedQuestions });\r\n            console.log('Changes saved successfully');\r\n        } catch (error) {\r\n            console.error('Error saving changes:', error);\r\n            // Handle error appropriately (e.g., show an error message to the user)\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (serverError) {\r\n        return <div>{serverError}</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Edit Questions</h2>\r\n            {editedQuestions.map((question, index) => (\r\n                <div key={index}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={question.question}\r\n                        onChange={(e) => handleQuestionChange(index, e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={question.answer}\r\n                        onChange={(e) => handleAnswerChange(index, e.target.value)}\r\n                    />\r\n                </div>\r\n            ))}\r\n            <button onClick={saveChanges}>Save Changes</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditQuestions;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMf,aAAa,CAAC,qCAAqC,CAAC;QACvEO,YAAY,CAACQ,IAAI,CAACT,SAAS,CAAC;QAC5BG,kBAAkB,CAACM,IAAI,CAACT,SAAS,CAAC,CAAC,CAAC;QACpCK,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZH,cAAc,CAAC,4BAA4B,GAAGG,KAAK,CAACC,OAAO,CAAC;QAC5DN,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC;IAEDG,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACR,SAAS,IAAIA,SAAS,CAACY,MAAM,KAAK,CAAC,EAAE;IACtC,oBAAOf,OAAA;MAAAgB,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvC;;EAEF;EACA,MAAMC,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC3C,MAAMC,gBAAgB,GAAG,CAAC,GAAGnB,eAAe,CAAC;IAC7CmB,gBAAgB,CAACF,KAAK,CAAC,CAACG,QAAQ,GAAGF,KAAK;IACxCjB,kBAAkB,CAACkB,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACA,MAAME,kBAAkB,GAAGA,CAACJ,KAAK,EAAEC,KAAK,KAAK;IACzC,MAAMC,gBAAgB,GAAG,CAAC,GAAGnB,eAAe,CAAC;IAC7CmB,gBAAgB,CAACF,KAAK,CAAC,CAACK,MAAM,GAAGJ,KAAK;IACtCjB,kBAAkB,CAACkB,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACA,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACA,MAAM9B,aAAa,CAAC,qCAAqC,EAAE;QAAEK,SAAS,EAAEE;MAAgB,CAAC,CAAC;MAC1FwB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC7C,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACZgB,OAAO,CAAChB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;IACJ;EACJ,CAAC;EAED,IAAIN,SAAS,EAAE;IACX,oBAAOP,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC;EAEA,IAAIX,WAAW,EAAE;IACb,oBAAOT,OAAA;MAAAgB,QAAA,EAAMP;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACnC;EAEA,oBACIpB,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtBf,eAAe,CAAC0B,GAAG,CAAC,CAACN,QAAQ,EAAEH,KAAK,kBACjCtB,OAAA;MAAAgB,QAAA,gBACIhB,OAAA;QACIgC,IAAI,EAAC,MAAM;QACXT,KAAK,EAAEE,QAAQ,CAACA,QAAS;QACzBQ,QAAQ,EAAGC,CAAC,IAAKb,oBAAoB,CAACC,KAAK,EAAEY,CAAC,CAACC,MAAM,CAACZ,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,eACFpB,OAAA;QACIgC,IAAI,EAAC,MAAM;QACXT,KAAK,EAAEE,QAAQ,CAACE,MAAO;QACvBM,QAAQ,EAAGC,CAAC,IAAKR,kBAAkB,CAACJ,KAAK,EAAEY,CAAC,CAACC,MAAM,CAACZ,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC;IAAA,GAVIE,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWV,CACR,CAAC,eACFpB,OAAA;MAAQoC,OAAO,EAAER,WAAY;MAAAZ,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEd,CAAC;AAAClB,EAAA,CAhFID,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAkFnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}