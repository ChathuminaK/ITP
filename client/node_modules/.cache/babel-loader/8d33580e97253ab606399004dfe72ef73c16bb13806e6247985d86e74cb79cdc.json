{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\n//redux actions\nimport * as Action from '../redux/question_reducer';\nimport { getServerData } from \"../helper/helper\";\nexport const useEditQuestion = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [getData, setGetData] = useState({\n    isLoading: false,\n    apiData: [],\n    serverError: null\n  });\n  useEffect(() => {\n    setGetData(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n\n    // async function to fetch backend data\n    (async () => {\n      try {\n        const [{\n          questions,\n          answers\n        }] = await getServerData('http://localhost:5000/api/questions');\n        if (questions.length > 0) {\n          setGetData(prev => ({\n            ...prev,\n            isLoading: false\n          }));\n          // Restructure data to hold question and answers together\n          const apiData = questions.map((question, index) => ({\n            question,\n            answer: answers[index] // Assuming answers are aligned with questions\n          }));\n          setGetData(prev => ({\n            ...prev,\n            apiData\n          }));\n\n          // Dispatch an action\n          dispatch(Action.startExamAction({\n            question: questions,\n            answers\n          }));\n        } else {\n          throw new Error(\"No Questions Available\");\n        }\n      } catch (error) {\n        setGetData(prev => ({\n          ...prev,\n          isLoading: false,\n          serverError: error\n        }));\n      }\n    })();\n  }, [dispatch]);\n  return [getData, setGetData];\n};\n_s(useEditQuestion, \"pGf4iDiGZ8Yr0c/k70p37PCzs6A=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","useDispatch","Action","getServerData","useEditQuestion","_s","dispatch","getData","setGetData","isLoading","apiData","serverError","prev","questions","answers","length","map","question","index","answer","startExamAction","Error","error"],"sources":["C:/Users/Pahan/my-project-app/client1/src/hooks/EditQuestion.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\n\r\n//redux actions\r\nimport * as Action from '../redux/question_reducer'\r\nimport { getServerData } from \"../helper/helper\"\r\n\r\nexport const useEditQuestion = () => {\r\n    const dispatch = useDispatch(); \r\n    const [getData, setGetData] = useState({ isLoading: false, apiData: [], serverError: null });\r\n\r\n    useEffect(() => {\r\n        setGetData(prev => ({ ...prev, isLoading: true }));\r\n\r\n        // async function to fetch backend data\r\n        (async () => {\r\n            try {\r\n                const [{ questions, answers }] = await getServerData('http://localhost:5000/api/questions');\r\n\r\n                if (questions.length > 0) {\r\n                    setGetData(prev => ({ ...prev, isLoading: false }));\r\n                    // Restructure data to hold question and answers together\r\n                    const apiData = questions.map((question, index) => ({\r\n                        question,\r\n                        answer: answers[index] // Assuming answers are aligned with questions\r\n                    }));\r\n                    setGetData(prev => ({ ...prev, apiData }));\r\n\r\n                    // Dispatch an action\r\n                    dispatch(Action.startExamAction({ question: questions, answers }));\r\n                } else {\r\n                    throw new Error(\"No Questions Available\");\r\n                }\r\n            } catch (error) {\r\n                setGetData(prev => ({ ...prev, isLoading: false, serverError: error }));\r\n            }\r\n        })();\r\n    }, [dispatch]);\r\n\r\n    return [getData, setGetData];\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;;AAEzC;AACA,OAAO,KAAKC,MAAM,MAAM,2BAA2B;AACnD,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC;IAAES,SAAS,EAAE,KAAK;IAAEC,OAAO,EAAE,EAAE;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAE5FZ,SAAS,CAAC,MAAM;IACZS,UAAU,CAACI,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEH,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;;IAElD;IACA,CAAC,YAAY;MACT,IAAI;QACA,MAAM,CAAC;UAAEI,SAAS;UAAEC;QAAQ,CAAC,CAAC,GAAG,MAAMX,aAAa,CAAC,qCAAqC,CAAC;QAE3F,IAAIU,SAAS,CAACE,MAAM,GAAG,CAAC,EAAE;UACtBP,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEH,SAAS,EAAE;UAAM,CAAC,CAAC,CAAC;UACnD;UACA,MAAMC,OAAO,GAAGG,SAAS,CAACG,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;YAChDD,QAAQ;YACRE,MAAM,EAAEL,OAAO,CAACI,KAAK,CAAC,CAAC;UAC3B,CAAC,CAAC,CAAC;UACHV,UAAU,CAACI,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAEF;UAAQ,CAAC,CAAC,CAAC;;UAE1C;UACAJ,QAAQ,CAACJ,MAAM,CAACkB,eAAe,CAAC;YAAEH,QAAQ,EAAEJ,SAAS;YAAEC;UAAQ,CAAC,CAAC,CAAC;QACtE,CAAC,MAAM;UACH,MAAM,IAAIO,KAAK,CAAC,wBAAwB,CAAC;QAC7C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZd,UAAU,CAACI,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAEH,SAAS,EAAE,KAAK;UAAEE,WAAW,EAAEW;QAAM,CAAC,CAAC,CAAC;MAC3E;IACJ,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,OAAO,CAACC,OAAO,EAAEC,UAAU,CAAC;AAChC,CAAC;AAAAH,EAAA,CAjCYD,eAAe;EAAA,QACPH,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}