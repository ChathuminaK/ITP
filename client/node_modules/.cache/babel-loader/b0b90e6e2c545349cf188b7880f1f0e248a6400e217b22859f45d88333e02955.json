{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pahan\\\\my-project-app\\\\client1\\\\src\\\\components\\\\EditQuestion.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getServerData } from '../helper/helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionWithAnswers = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getServerData('http://localhost:5000/api/questions');\n        const questions = data.questions.map(question => question.question);\n        const answers = data.answers;\n        setQuestions(questions);\n        setAnswers(answers);\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No questions found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Questions with Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your answer\",\n        value: answers[index] || '' // Display answer if available\n        ,\n        readOnly: true // Make the input read-only\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionWithAnswers, \"o1tHf0aJL3A3BOBab9F+LeisEDI=\");\n_c = QuestionWithAnswers;\nexport default QuestionWithAnswers;\nvar _c;\n$RefreshReg$(_c, \"QuestionWithAnswers\");","map":{"version":3,"names":["React","useState","useEffect","getServerData","jsxDEV","_jsxDEV","QuestionWithAnswers","_s","questions","setQuestions","answers","setAnswers","fetchData","data","map","question","error","console","length","children","fileName","_jsxFileName","lineNumber","columnNumber","index","type","placeholder","value","readOnly","id","_c","$RefreshReg$"],"sources":["C:/Users/Pahan/my-project-app/client1/src/components/EditQuestion.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getServerData } from '../helper/helper';\r\n\r\nconst QuestionWithAnswers = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getServerData('http://localhost:5000/api/questions');\r\n        const questions = data.questions.map(question => question.question);\r\n        const answers = data.answers;\r\n        setQuestions(questions);\r\n        setAnswers(answers);\r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (!questions || questions.length === 0) {\r\n    return <div>No questions found.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Questions with Answers</h2>\r\n      {questions.map((question, index) => (\r\n        <div key={question.id}>\r\n          <p>{question.question}</p>\r\n          <input \r\n            type=\"text\" \r\n            placeholder=\"Enter your answer\" \r\n            value={answers[index] || ''} // Display answer if available\r\n            readOnly // Make the input read-only\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionWithAnswers;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMV,aAAa,CAAC,qCAAqC,CAAC;QACvE,MAAMK,SAAS,GAAGK,IAAI,CAACL,SAAS,CAACM,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACA,QAAQ,CAAC;QACnE,MAAML,OAAO,GAAGG,IAAI,CAACH,OAAO;QAC5BD,YAAY,CAACD,SAAS,CAAC;QACvBG,UAAU,CAACD,OAAO,CAAC;MACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACJ,SAAS,IAAIA,SAAS,CAACU,MAAM,KAAK,CAAC,EAAE;IACxC,oBAAOb,OAAA;MAAAc,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvC;EAEA,oBACElB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC9Bf,SAAS,CAACM,GAAG,CAAC,CAACC,QAAQ,EAAES,KAAK,kBAC7BnB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QAAAc,QAAA,EAAIJ,QAAQ,CAACA;MAAQ;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BlB,OAAA;QACEoB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAEjB,OAAO,CAACc,KAAK,CAAC,IAAI,EAAG,CAAC;QAAA;QAC7BI,QAAQ,OAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC;IAAA,GAPMR,QAAQ,CAACc,EAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQhB,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CAxCID,mBAAmB;AAAAwB,EAAA,GAAnBxB,mBAAmB;AA0CzB,eAAeA,mBAAmB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}